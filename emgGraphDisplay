//
//  emgGraphDisplay.swift
//  EMG-ble-kth
//
//  Created by Linus Remahl on 2021-10-31.
//

import CoreGraphics
import SwiftUI

class emgGraph: ObservableObject {
    @Published private(set) var values: Array<CGFloat>
    var recorded_values: Array<CGFloat> = []
    var recorded_rms: Array<CGFloat> = []
    var recording: Bool = false
    var start_time: CFTimeInterval = 0
    var lastUpdateTime: Date = Date()

    init(firstValues: Array<CGFloat>) {
        values = firstValues
    }

    func record() {
        recording = true
        start_time = CACurrentMediaTime()
    }

    func stop_recording_and_save() -> String {
        let time_recorded: CFTimeInterval = CACurrentMediaTime() - start_time
        recording = false

        var dataset = "Time,EMG,RMS\n"
        for (index, value) in recorded_values.enumerated() {
            let time = Double(index) * (time_recorded / Double(recorded_values.count))
            let rmsValue = index < recorded_rms.count ? recorded_rms[index] : 0.0
            dataset += "\(time),\(value),\(rmsValue)\n"
        }

        DispatchQueue.global(qos: .background).async {
            let paths = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)
            let date = Date()
            let dateformatter = DateFormatter()
            dateformatter.locale = Locale(identifier: "en_US_POSIX")
            dateformatter.dateFormat = "yyyy-MM-dd'T'HH_mm_ss"

            let filename = paths[0].appendingPathComponent("emg_data_" +
                dateformatter.string(from: date) +
                ".csv")
            debugPrint(filename)

            do {
                try dataset.write(to: filename, atomically: true, encoding: .utf8)
                print("File saved successfully")
            } catch {
                print("Failed to write file: \(error.localizedDescription)")
            }
        }

        recorded_values.removeAll()
        recorded_rms.removeAll()
        return dataset
    }

    func append(value: CGFloat) {
        let now = Date()
        if now.timeIntervalSince(lastUpdateTime) > 0.1 { // Throttle UI updates
            DispatchQueue.main.async {
                self.values.append(value)
                self.lastUpdateTime = now
            }
        }

        if recording {
            recorded_values.append(value)
            recorded_rms.append(calculateRMS(for: recorded_values)) // Pass the data to calculateRMS
        }
    }

    func append(values: Array<CGFloat>) {
        if recording {
            self.recorded_values += values
            let batchRMS = calculateRMS(for: values)
            self.recorded_rms.append(contentsOf: Array(repeating: batchRMS, count: values.count))
        }
        self.values += values

        if self.values.count > 1000 {
            self.values.removeFirst(self.values.count - 1000)
        }
    }

    func calculateRMS(for values: [CGFloat]) -> CGFloat {
        guard !values.isEmpty else { return 0.0 }
        let squaredSum = values.reduce(0.0) { $0 + $1 * $1 }
        return sqrt(squaredSum / CGFloat(values.count))
    }
}
